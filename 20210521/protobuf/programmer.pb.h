// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: programmer.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_programmer_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_programmer_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_programmer_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_programmer_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_programmer_2eproto;
class Programmer;
struct ProgrammerDefaultTypeInternal;
extern ProgrammerDefaultTypeInternal _Programmer_default_instance_;
class Programmer_ProjsEntry_DoNotUse;
struct Programmer_ProjsEntry_DoNotUseDefaultTypeInternal;
extern Programmer_ProjsEntry_DoNotUseDefaultTypeInternal _Programmer_ProjsEntry_DoNotUse_default_instance_;
class Project;
struct ProjectDefaultTypeInternal;
extern ProjectDefaultTypeInternal _Project_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Programmer* Arena::CreateMaybeMessage<::Programmer>(Arena*);
template<> ::Programmer_ProjsEntry_DoNotUse* Arena::CreateMaybeMessage<::Programmer_ProjsEntry_DoNotUse>(Arena*);
template<> ::Project* Arena::CreateMaybeMessage<::Project>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Programmer_ProjsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Programmer_ProjsEntry_DoNotUse, 
    std::string, ::Project,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Programmer_ProjsEntry_DoNotUse, 
    std::string, ::Project,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  Programmer_ProjsEntry_DoNotUse();
  explicit constexpr Programmer_ProjsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Programmer_ProjsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Programmer_ProjsEntry_DoNotUse& other);
  static const Programmer_ProjsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Programmer_ProjsEntry_DoNotUse*>(&_Programmer_ProjsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "Programmer.ProjsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class Programmer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Programmer) */ {
 public:
  inline Programmer() : Programmer(nullptr) {}
  ~Programmer() override;
  explicit constexpr Programmer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Programmer(const Programmer& from);
  Programmer(Programmer&& from) noexcept
    : Programmer() {
    *this = ::std::move(from);
  }

  inline Programmer& operator=(const Programmer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Programmer& operator=(Programmer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Programmer& default_instance() {
    return *internal_default_instance();
  }
  static inline const Programmer* internal_default_instance() {
    return reinterpret_cast<const Programmer*>(
               &_Programmer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Programmer& a, Programmer& b) {
    a.Swap(&b);
  }
  inline void Swap(Programmer* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Programmer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Programmer* New() const final {
    return new Programmer();
  }

  Programmer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Programmer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Programmer& from);
  void MergeFrom(const Programmer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Programmer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Programmer";
  }
  protected:
  explicit Programmer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kLangFieldNumber = 5,
    kBookFieldNumber = 6,
    kProjsFieldNumber = 7,
    kNameFieldNumber = 1,
    kPhoneFieldNumber = 3,
    kAddressFieldNumber = 4,
    kAgeFieldNumber = 2,
  };
  // repeated string lang = 5;
  int lang_size() const;
  private:
  int _internal_lang_size() const;
  public:
  void clear_lang();
  const std::string& lang(int index) const;
  std::string* mutable_lang(int index);
  void set_lang(int index, const std::string& value);
  void set_lang(int index, std::string&& value);
  void set_lang(int index, const char* value);
  void set_lang(int index, const char* value, size_t size);
  std::string* add_lang();
  void add_lang(const std::string& value);
  void add_lang(std::string&& value);
  void add_lang(const char* value);
  void add_lang(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& lang() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_lang();
  private:
  const std::string& _internal_lang(int index) const;
  std::string* _internal_add_lang();
  public:

  // repeated string book = 6;
  int book_size() const;
  private:
  int _internal_book_size() const;
  public:
  void clear_book();
  const std::string& book(int index) const;
  std::string* mutable_book(int index);
  void set_book(int index, const std::string& value);
  void set_book(int index, std::string&& value);
  void set_book(int index, const char* value);
  void set_book(int index, const char* value, size_t size);
  std::string* add_book();
  void add_book(const std::string& value);
  void add_book(std::string&& value);
  void add_book(const char* value);
  void add_book(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& book() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_book();
  private:
  const std::string& _internal_book(int index) const;
  std::string* _internal_add_book();
  public:

  // map<string, .Project> projs = 7;
  int projs_size() const;
  private:
  int _internal_projs_size() const;
  public:
  void clear_projs();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Project >&
      _internal_projs() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Project >*
      _internal_mutable_projs();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Project >&
      projs() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Project >*
      mutable_projs();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string phone = 3;
  void clear_phone();
  const std::string& phone() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_phone(ArgT0&& arg0, ArgT... args);
  std::string* mutable_phone();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_phone();
  void set_allocated_phone(std::string* phone);
  private:
  const std::string& _internal_phone() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_phone(const std::string& value);
  std::string* _internal_mutable_phone();
  public:

  // string address = 4;
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // int32 age = 2;
  void clear_age();
  ::PROTOBUF_NAMESPACE_ID::int32 age() const;
  void set_age(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_age() const;
  void _internal_set_age(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Programmer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> lang_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> book_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Programmer_ProjsEntry_DoNotUse,
      std::string, ::Project,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> projs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phone_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::int32 age_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_programmer_2eproto;
};
// -------------------------------------------------------------------

class Project final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Project) */ {
 public:
  inline Project() : Project(nullptr) {}
  ~Project() override;
  explicit constexpr Project(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Project(const Project& from);
  Project(Project&& from) noexcept
    : Project() {
    *this = ::std::move(from);
  }

  inline Project& operator=(const Project& from) {
    CopyFrom(from);
    return *this;
  }
  inline Project& operator=(Project&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Project& default_instance() {
    return *internal_default_instance();
  }
  static inline const Project* internal_default_instance() {
    return reinterpret_cast<const Project*>(
               &_Project_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Project& a, Project& b) {
    a.Swap(&b);
  }
  inline void Swap(Project* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Project* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Project* New() const final {
    return new Project();
  }

  Project* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Project>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Project& from);
  void MergeFrom(const Project& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Project* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Project";
  }
  protected:
  explicit Project(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPriceFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // float price = 2;
  void clear_price();
  float price() const;
  void set_price(float value);
  private:
  float _internal_price() const;
  void _internal_set_price(float value);
  public:

  // @@protoc_insertion_point(class_scope:Project)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  float price_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_programmer_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Programmer

// string name = 1;
inline void Programmer::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Programmer::name() const {
  // @@protoc_insertion_point(field_get:Programmer.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Programmer::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Programmer.name)
}
inline std::string* Programmer::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Programmer.name)
  return _internal_mutable_name();
}
inline const std::string& Programmer::_internal_name() const {
  return name_.Get();
}
inline void Programmer::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Programmer::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Programmer::release_name() {
  // @@protoc_insertion_point(field_release:Programmer.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Programmer::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Programmer.name)
}

// int32 age = 2;
inline void Programmer::clear_age() {
  age_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Programmer::_internal_age() const {
  return age_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Programmer::age() const {
  // @@protoc_insertion_point(field_get:Programmer.age)
  return _internal_age();
}
inline void Programmer::_internal_set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  age_ = value;
}
inline void Programmer::set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:Programmer.age)
}

// string phone = 3;
inline void Programmer::clear_phone() {
  phone_.ClearToEmpty();
}
inline const std::string& Programmer::phone() const {
  // @@protoc_insertion_point(field_get:Programmer.phone)
  return _internal_phone();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Programmer::set_phone(ArgT0&& arg0, ArgT... args) {
 
 phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Programmer.phone)
}
inline std::string* Programmer::mutable_phone() {
  // @@protoc_insertion_point(field_mutable:Programmer.phone)
  return _internal_mutable_phone();
}
inline const std::string& Programmer::_internal_phone() const {
  return phone_.Get();
}
inline void Programmer::_internal_set_phone(const std::string& value) {
  
  phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Programmer::_internal_mutable_phone() {
  
  return phone_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Programmer::release_phone() {
  // @@protoc_insertion_point(field_release:Programmer.phone)
  return phone_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Programmer::set_allocated_phone(std::string* phone) {
  if (phone != nullptr) {
    
  } else {
    
  }
  phone_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phone,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Programmer.phone)
}

// string address = 4;
inline void Programmer::clear_address() {
  address_.ClearToEmpty();
}
inline const std::string& Programmer::address() const {
  // @@protoc_insertion_point(field_get:Programmer.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Programmer::set_address(ArgT0&& arg0, ArgT... args) {
 
 address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Programmer.address)
}
inline std::string* Programmer::mutable_address() {
  // @@protoc_insertion_point(field_mutable:Programmer.address)
  return _internal_mutable_address();
}
inline const std::string& Programmer::_internal_address() const {
  return address_.Get();
}
inline void Programmer::_internal_set_address(const std::string& value) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Programmer::_internal_mutable_address() {
  
  return address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Programmer::release_address() {
  // @@protoc_insertion_point(field_release:Programmer.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Programmer::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Programmer.address)
}

// repeated string lang = 5;
inline int Programmer::_internal_lang_size() const {
  return lang_.size();
}
inline int Programmer::lang_size() const {
  return _internal_lang_size();
}
inline void Programmer::clear_lang() {
  lang_.Clear();
}
inline std::string* Programmer::add_lang() {
  // @@protoc_insertion_point(field_add_mutable:Programmer.lang)
  return _internal_add_lang();
}
inline const std::string& Programmer::_internal_lang(int index) const {
  return lang_.Get(index);
}
inline const std::string& Programmer::lang(int index) const {
  // @@protoc_insertion_point(field_get:Programmer.lang)
  return _internal_lang(index);
}
inline std::string* Programmer::mutable_lang(int index) {
  // @@protoc_insertion_point(field_mutable:Programmer.lang)
  return lang_.Mutable(index);
}
inline void Programmer::set_lang(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Programmer.lang)
  lang_.Mutable(index)->assign(value);
}
inline void Programmer::set_lang(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Programmer.lang)
  lang_.Mutable(index)->assign(std::move(value));
}
inline void Programmer::set_lang(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  lang_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Programmer.lang)
}
inline void Programmer::set_lang(int index, const char* value, size_t size) {
  lang_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Programmer.lang)
}
inline std::string* Programmer::_internal_add_lang() {
  return lang_.Add();
}
inline void Programmer::add_lang(const std::string& value) {
  lang_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Programmer.lang)
}
inline void Programmer::add_lang(std::string&& value) {
  lang_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Programmer.lang)
}
inline void Programmer::add_lang(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  lang_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Programmer.lang)
}
inline void Programmer::add_lang(const char* value, size_t size) {
  lang_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Programmer.lang)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Programmer::lang() const {
  // @@protoc_insertion_point(field_list:Programmer.lang)
  return lang_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Programmer::mutable_lang() {
  // @@protoc_insertion_point(field_mutable_list:Programmer.lang)
  return &lang_;
}

// repeated string book = 6;
inline int Programmer::_internal_book_size() const {
  return book_.size();
}
inline int Programmer::book_size() const {
  return _internal_book_size();
}
inline void Programmer::clear_book() {
  book_.Clear();
}
inline std::string* Programmer::add_book() {
  // @@protoc_insertion_point(field_add_mutable:Programmer.book)
  return _internal_add_book();
}
inline const std::string& Programmer::_internal_book(int index) const {
  return book_.Get(index);
}
inline const std::string& Programmer::book(int index) const {
  // @@protoc_insertion_point(field_get:Programmer.book)
  return _internal_book(index);
}
inline std::string* Programmer::mutable_book(int index) {
  // @@protoc_insertion_point(field_mutable:Programmer.book)
  return book_.Mutable(index);
}
inline void Programmer::set_book(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Programmer.book)
  book_.Mutable(index)->assign(value);
}
inline void Programmer::set_book(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Programmer.book)
  book_.Mutable(index)->assign(std::move(value));
}
inline void Programmer::set_book(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  book_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Programmer.book)
}
inline void Programmer::set_book(int index, const char* value, size_t size) {
  book_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Programmer.book)
}
inline std::string* Programmer::_internal_add_book() {
  return book_.Add();
}
inline void Programmer::add_book(const std::string& value) {
  book_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Programmer.book)
}
inline void Programmer::add_book(std::string&& value) {
  book_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Programmer.book)
}
inline void Programmer::add_book(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  book_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Programmer.book)
}
inline void Programmer::add_book(const char* value, size_t size) {
  book_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Programmer.book)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Programmer::book() const {
  // @@protoc_insertion_point(field_list:Programmer.book)
  return book_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Programmer::mutable_book() {
  // @@protoc_insertion_point(field_mutable_list:Programmer.book)
  return &book_;
}

// map<string, .Project> projs = 7;
inline int Programmer::_internal_projs_size() const {
  return projs_.size();
}
inline int Programmer::projs_size() const {
  return _internal_projs_size();
}
inline void Programmer::clear_projs() {
  projs_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Project >&
Programmer::_internal_projs() const {
  return projs_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Project >&
Programmer::projs() const {
  // @@protoc_insertion_point(field_map:Programmer.projs)
  return _internal_projs();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Project >*
Programmer::_internal_mutable_projs() {
  return projs_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Project >*
Programmer::mutable_projs() {
  // @@protoc_insertion_point(field_mutable_map:Programmer.projs)
  return _internal_mutable_projs();
}

// -------------------------------------------------------------------

// Project

// string name = 1;
inline void Project::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Project::name() const {
  // @@protoc_insertion_point(field_get:Project.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Project::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Project.name)
}
inline std::string* Project::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Project.name)
  return _internal_mutable_name();
}
inline const std::string& Project::_internal_name() const {
  return name_.Get();
}
inline void Project::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Project::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Project::release_name() {
  // @@protoc_insertion_point(field_release:Project.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Project::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Project.name)
}

// float price = 2;
inline void Project::clear_price() {
  price_ = 0;
}
inline float Project::_internal_price() const {
  return price_;
}
inline float Project::price() const {
  // @@protoc_insertion_point(field_get:Project.price)
  return _internal_price();
}
inline void Project::_internal_set_price(float value) {
  
  price_ = value;
}
inline void Project::set_price(float value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:Project.price)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_programmer_2eproto
